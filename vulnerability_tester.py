import tkinter as tk
from tkinter import ttk
from vulnerability_scanner import VulnerabilityScanner
import vulnerability_scanner

class VulnerabilityTesterApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Vulnerability Tester")

        self.url_label = ttk.Label(root, text="Enter the target URL:")
        self.url_label.grid(row=0, column=0, padx=10, pady=10, sticky=tk.W)

        self.url_entry = ttk.Entry(root, width=50)
        self.url_entry.grid(row=0, column=1, padx=10, pady=10)

        self.scan_button = ttk.Button(root, text="Scan", command=self.scan_url)
        self.scan_button.grid(row=1, column=0, columnspan=2, padx=10, pady=10)

        self.result_text = tk.Text(root, width=80, height=20)
        self.result_text.grid(row=2, column=0, columnspan=2, padx=10, pady=10)

    def scan_url(self):
        target_url = self.url_entry.get()
        scanner = VulnerabilityScanner(target_url)

        # Perform vulnerability tests
        tech_stack = scanner.find_tech_stack(target_url)
        self.result_text.insert(tk.END, "Technology Stack:\n")
        for stack_type, technologies in tech_stack.items():
            self.result_text.insert(tk.END, f"{stack_type}:\n")
            for tech in technologies:
                self.result_text.insert(tk.END, f"  - {tech}\n")

        wayback_url = vulnerability_scanner.get_wayback_url(target_url)
        self.result_text.insert(tk.END, f"\nWayback URL: {wayback_url}\n")

        if scanner.check_injection():
            self.result_text.insert(tk.END, "Potential injection vulnerability detected\n")

        if scanner.check_auth_vulnerability():
            self.result_text.insert(tk.END, "Potential authentication vulnerability detected\n")

        if scanner.is_sensitive_data_exposure_vulnerable():
            self.result_text.insert(tk.END, "Potential sensitive data exposure vulnerability detected\n")

        if scanner.check_xxe_vulnerability():
            self.result_text.insert(tk.END, "Potential XXE vulnerability detected\n")

        if scanner.check_broken_excess_control():
            self.result_text.insert(tk.END, "Potential broken excess control vulnerability detected\n")

        if scanner.check_security_misconfiguration():
            self.result_text.insert(tk.END, "Potential security misconfiguration detected\n")

        if scanner.check_cross_site_scripting():
            self.result_text.insert(tk.END, "Potential cross-site scripting vulnerability detected\n")

        if scanner.check_insecure_deserialization():
            self.result_text.insert(tk.END, "Potential insecure deserialization vulnerability detected\n")

        if scanner.check_insufficient_logging_and_monitoring():
            self.result_text.insert(tk.END, "Potential insufficient logging and monitoring detected\n")

        scanner.perform_google_dork()
        self.result_text.insert(tk.END, "Google Dork query performed\n")

def main():
    root = tk.Tk()
    app = VulnerabilityTesterApp(root)
    root.mainloop()

if __name__ == "__main__":
    main()
